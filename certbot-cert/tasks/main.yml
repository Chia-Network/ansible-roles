---
- name: Install certbot
  become: true
  community.general.snap:
    name: certbot
    classic: true
    options:
      - trust-plugin-with-root=ok
  tags: certbot

- name: Install certbot DNS Plugin
  become: true
  community.general.snap:
    name: certbot-dns-cloudflare
    classic: true
  when: certbot_validation_strategy == "cloudflare"
  tags: certbot

- name: Symlink certbot into place.
  become: true
  ansible.builtin.file:
    src: /snap/bin/certbot
    dest: /usr/bin/certbot
    state: link
  tags: certbot

- name: Template cloudflare credentials ini for certbot
  become: true
  ansible.builtin.template:
    src: cloudflare.ini.j2
    dest: /root/cloudflare.ini
    owner: root
    group: root
    mode: '0600'
  when: certbot_validation_strategy == "cloudflare"
  tags: certbot

- name: Issue certbot certificate using DNS validation
  become: true
  ansible.builtin.command: certbot certonly --dns-cloudflare --dns-cloudflare-credentials /root/cloudflare.ini --noninteractive --agree-tos --email {{ certbot_email }} -d "{{ certbot_domains | join(',') }}" --dns-cloudflare-propagation-seconds {{ certbot_dns_validation_seconds }}
  args:
    creates: /etc/letsencrypt/live/{{ certbot_domains | first }}/privkey.pem
  when: certbot_validation_strategy == "cloudflare"
  tags: certbot

- name: Remove existing default Nginx site configuration(s)
  become: true
  ansible.builtin.file:
    path: "/etc/nginx/sites-enabled/{{ item }}"
    state: absent
  with_items:
    - default
    - default.conf
  notify: Reload-nginx
  when: certbot_validation_strategy == "webroot"
  tags: certbot

- name: Copy default config
  become: true
  ansible.builtin.template:
    src: "{{ item }}"
    dest: "/etc/nginx/conf.d/{{ item }}"
    owner: root
    group: root
    mode: '0644'
  with_items:
    - "custom-default.conf"
  notify: Reload-nginx
  when: certbot_validation_strategy == "webroot"
  tags: certbot

- name: Ensure certbot webroot directory exists
  become: true
  ansible.builtin.file:
    path: "{{ certbot_webroot_path }}"
    state: directory
    mode: '0755'
  when: certbot_validation_strategy == "webroot"
  tags: certbot

- name: Copy snippets
  become: true
  ansible.builtin.template:
    src: "{{ item }}"
    dest: "/etc/nginx/snippets/{{ item }}"
    owner: root
    group: root
    mode: '0644'
  with_items:
    - "lets-encrypt-webroot.conf"
  notify: Reload-nginx
  when: certbot_validation_strategy == "webroot"
  tags: certbot

# Run any handlers that have been triggered up to this point now
# We need the default servers to work with our templates before we
# try to issue any certificates.
- name: Flush handlers
  ansible.builtin.meta: flush_handlers
  tags: certbot

- name: Issue certbot certificate using webroot validation
  become: true
  ansible.builtin.command: certbot certonly --webroot --webroot-path {{ certbot_webroot_path }} --noninteractive --agree-tos --email {{ certbot_email }} -d "{{ certbot_domains | join(',') }}"
  args:
    creates: /etc/letsencrypt/live/{{ certbot_domains | first }}/privkey.pem
  when: certbot_validation_strategy == "webroot"
  notify: Reload-nginx
  tags: certbot

- name: Add cron job for certbot renewal
  become: true
  ansible.builtin.cron:
    name: Certbot automatic renewal.
    job: "certbot renew --quiet --no-self-upgrade"
    minute: "30"
    hour: "5"
    user: "root"
  tags: certbot

# This takes care of reloading Nginx when certificates are renewed
- name: Add cron job to reload nginx configs, in case new certs are available
  become: true
  ansible.builtin.cron:
    name: Reload nginx for new certs
    job: "systemctl reload nginx"
    minute: "45"
    hour: "5"
    user: "root"
  tags: certbot
