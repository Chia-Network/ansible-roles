---
- name: Cleanup any old leftovers
  include_tasks: "cleanup.yml"

- name: Stop Monit Service
  become: yes
  ansible.builtin.service:
    name: monit
    state: stopped
  when: add_monit_config
  ignore_errors: yes # This will still run if the error is not correct

- name: Ensure chia directories exist
  # become, in case ownership is incorrect
  become: yes
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: "{{ user }}"
    group: "{{ group }}"
    recurse: yes
  with_items:
    - "{{ chia_root }}/db"

- name: Ensure CHIA_ROOT is set in .bashrc
  become: yes
  become_user: "{{ user }}"
  ansible.builtin.lineinfile:
    path: "/home/{{ user }}/.bashrc"
    regexp: '^export CHIA_ROOT='
    line: "export CHIA_ROOT={{ chia_root }}"
  when: chia_root_to_env

- name: Install from source
  include_tasks: "source.yml"
  when: chia_installation_method == "source"

- name: Install from apt
  include_tasks: "apt.yml"
  when: chia_installation_method == "apt"

- name: Check if the stub DB was created, if we plan to overwrite it with the S3 DB
  become: yes
  become_user: "{{ user }}"
  find:
    paths: "{{ chia_root }}/db/"
    # Files less than 10k, aka, the stub DB generated by chia init
    size: "-10k"
    patterns: "blockchain_{{ db_version }}_{{ network }}.sqlite"
  when: download_blockchain_db
  register: stub_db_output

- name: Delete the stub DB if it was present
  become: yes
  become_user: "{{ user }}"
  file:
    path: "{{item.path}}"
    state: absent
  with_items: "{{ stub_db_output.files }}"
  when: download_blockchain_db

- name: Copy latest blockchain DB and cache files from S3
  become: yes
  become_user: "{{ user }}"
  shell: |
    aws --no-progress s3 cp s3://{{ blockchain_backup_bucket }}/{{ network }}/blockchain_{{ db_version }}_{{ network }}.sqlite {{ chia_root }}/db/blockchain_{{ db_version }}_{{ network }}.sqlite
    aws --no-progress s3 cp s3://{{ blockchain_backup_bucket }}/{{ network }}/height-to-hash {{ chia_root }}/db/height-to-hash
    aws --no-progress s3 cp s3://{{ blockchain_backup_bucket }}/{{ network }}/sub-epoch-summaries {{ chia_root }}/db/sub-epoch-summaries
  args:
    creates: "{{ chia_root }}/db/blockchain_{{ db_version }}_{{ network }}.sqlite"
  when: download_blockchain_db

- name: Copy latest crawler DB from S3
  become: yes
  become_user: "{{ user }}"
  shell: aws --no-progress s3 cp s3://{{ blockchain_backup_bucket }}/{{ network }}/crawler.db {{ chia_root }}/crawler.db
  args:
    creates: "{{ chia_root }}/crawler.db"
  when: download_crawler_db

- name: Chia Config
  become: yes
  template:
    src: config.yaml.j2
    dest: "{{ chia_root }}/config/config.yaml"
    owner: "{{ user }}"
    group: "{{ group }}"
  notify: restart-chia

- name: Add Keys
  become: yes
  become_user: "{{ user }}"
  shell: |
    echo "{{ item }}" | chia keys add
  environment:
    PATH: "/home/{{ user }}/chia-blockchain/venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
    CHIA_ROOT: "{{ chia_root }}"
  when:
    - keys | length
  with_items: "{{ keys }}"
  notify: restart-chia # @TODO would be better to have this only restart if we could tell keys changed

- name: Allow python in venv to bind 53
  become: yes
  shell: |
    setcap CAP_NET_BIND_SERVICE=+eip $(readlink -f /home/{{ user }}/chia-blockchain/venv/bin/python)
  when: component == "crawler" or component == "seeder" or component == "seeder-only"

- name: Chia Systemd Config Files
  become: yes
  ansible.builtin.template:
    src: "systemd/chia-{{ item }}.service.j2"
    dest: "/etc/systemd/system/{{ chia_service_base }}-{{ item }}.service"
    owner: root
    group: root
  notify: restart-chia
  with_items: "{{ chia_all_services }}"

- name: Chia Systemd Target
  become: yes
  ansible.builtin.template:
    src: "systemd/chia.target.j2"
    dest: "/etc/systemd/system/{{ chia_service_base }}.target"
    owner: root
    group: root
  notify: restart-chia

# Daemon is implied to be required, because of dependencies in the other services
- name: Ensure services are in desired boot and current state
  become: yes
  ansible.builtin.systemd:
    name: "{{ chia_service_base }}.target"
    daemon_reload: yes
    enabled: "{{ start_on_boot }}"
    state: "{{ start_now | ternary('started','stopped') }}"

- name: Add vector config
  become: yes
  ansible.builtin.template:
    src: chia-blockchain.vector.toml
    dest: /etc/vector/chia-blockchain.vector.toml
  when: add_vector_config
  notify: restart-vector

- name: Add custom monit config to conf.d
  become: yes
  ansible.builtin.template:
    src: monit_config.j2
    dest: /etc/monit/conf.d/chia_monit
  when: add_monit_config
  notify: restart-monit

- name: Start Monit Service
  become: yes
  ansible.builtin.service:
    name: monit
    state: started
  when: add_monit_config and monit_start_now
