min_mainnet_k_size: 32

# Send a ping to all peers after ping_interval seconds
ping_interval: 120
self_hostname: &self_hostname "localhost"
daemon_port: 55400
inbound_rate_limit_percent: 100
outbound_rate_limit_percent: 30

network_overrides: &network_overrides
  {{ network_overrides | to_nice_yaml(indent=2) | indent(2) }}

selected_network: &selected_network "{{ network }}"

# public ssl ca is included in source code
# Private ssl ca is used for trusted connections between machines user owns
private_ssl_ca:
  crt: "config/ssl/ca/private_ca.crt"
  key: "config/ssl/ca/private_ca.key"

chia_ssl_ca:
  crt: "config/ssl/ca/chia_ca.crt"
  key: "config/ssl/ca/chia_ca.key"

daemon_ssl:
  private_crt: "config/ssl/daemon/private_daemon.crt"
  private_key: "config/ssl/daemon/private_daemon.key"

# Controls logging of all servers (harvester, farmer, etc..). Each one can be overriden.
logging: &logging
  log_stdout: False  # If True, outputs to stdout instead of a file
  log_filename: "log/debug.log"
  log_level: "{{ log_level }}"  # Can be CRITICAL, ERROR, WARNING, INFO, DEBUG, NOTSET
  log_maxfilesrotation: 7 #  Max files in rotation. Default value 7 if the key is not set

dns:
  # The fake full node used for crawling will run on this port.
  port: {{ full_node_port }}
  # Most full nodes on the network run on this port. (i.e. 8444 for mainnet, 58444 for testnet).
  other_peers_port: {{ full_node_port }}
  # Peers used for the initial run.
  bootstrap_peers:
    {{ bootstrap_peers | to_nice_yaml | indent(4) }}
  # Only consider nodes synced at least to this height.
  minimum_height: {{ minimum_height }}
  domain_name: "{{ domain_name }}"
  nameserver: "{{ nameserver }}"
  ttl: {{ ttl }}
  soa:
    rname: "{{ soa_rname }}"
    serial_number: 1619105223
    refresh: 10800
    retry: 10800
    expire: 604800
    minimum: 1800
  network_overrides: *network_overrides
  selected_network: *selected_network
  logging: *logging

full_node:
  # The full node server (if run) will run on this port
  port: {{ full_node_port }}

  # Run multiple nodes with different databases by changing the database_path
  database_path: db/blockchain_v1_CHALLENGE.sqlite
  peer_db_path: db/peer_table_node.sqlite
  simulator_database_path: sim_db/simulator_blockchain_v1_CHALLENGE.sqlite
  simulator_peer_db_path: sim_db/peer_table_node.sqlite

  # If True, starts an RPC server at the following port
  start_rpc_server: True
  rpc_port: 8555

  # Use UPnP to attempt to allow other full nodes to reach your node behind a gateway
  enable_upnp: False

  # If node is more than these blocks behind, will do a sync (long sync)
  sync_blocks_behind_threshold: 300

  # If node is more than these blocks behind, will do a short batch-sync, if it's less, will do a backtrack sync
  short_sync_blocks_behind_threshold: 20

  # How often to initiate outbound connections to other full nodes.
  peer_connect_interval: 30
  # How long to wait for a peer connection
  peer_connect_timeout: {{ peer_connect_timeout }}
  # Accept peers until this number of connections
  target_peer_count: 80
  # Initiate outbound connections until this number is hit.
  target_outbound_peer_count: 8
  # IPv4/IPv6 network addresses and CIDR blocks allowed to connect even when target_peer_count has been hit.
  # exempt_peer_networks: ["192.168.0.3", "192.168.1.0/24", "fe80::/10", "2606:4700:4700::64/128"]
  exempt_peer_networks: []
  # Accept at most # of inbound connections for different node types.
  max_inbound_wallet: 20
  max_inbound_farmer: 10
  max_inbound_timelord: 5
  # Only connect to peers who we have heard about in the last recent_peer_threshold seconds
  recent_peer_threshold: 6000

  # Send to a Bluebox (sanatizing timelord) uncompact blocks once every
  # 'send_uncompact_interval' seconds. Set to 0 if you don't use this feature.
  send_uncompact_interval: 0
  # At every 'send_uncompact_interval' seconds, send blueboxes 'target_uncompact_proofs' proofs to be normalized.
  target_uncompact_proofs: 100
  # Setting this flag as True, blueboxes will sanitize only data needed in weight proof calculation, as opposed to whole blocks.
  # Default is set to False, as the network needs only one or two blueboxes like this.
  sanitize_weight_proof_only: False
  # timeout for weight proof request
  weight_proof_timeout: 360

  # when enabled, the full node will print a pstats profile to the root_dir/profile every second
  # analyze with chia/utils/profiler.py
  enable_profiler: False

  # this is a debug and profiling facility that logs all SQLite commands to a
  # separate log file (under logging/sql.log).
  log_sqlite_cmds: False

  # List of trusted DNS seeders to bootstrap from.
  # If you modify this, please change the hardcode as well from FullNode.set_server()
  dns_servers:
    - dns-introducer.chia.net
  farmer_peer:
    host: *self_hostname
    port: 8447
  timelord_peer:
    host: *self_hostname
    port: 8446
  introducer_peer:
    host: introducer.chia.net
    port: 8444
  wallet_peer:
    host: *self_hostname
    port: 8449
  logging: *logging
  network_overrides: *network_overrides
  selected_network: *selected_network

  ssl:
    private_crt:  "config/ssl/full_node/private_full_node.crt"
    private_key:  "config/ssl/full_node/private_full_node.key"
    public_crt:  "config/ssl/full_node/public_full_node.crt"
    public_key:  "config/ssl/full_node/public_full_node.key"
