---
# chia-runner/tasks/main.yml
- name: Install curl from apt default repo
  apt:
    name: curl
    state: latest

- name: Add repo containing podman to apt sources list
  shell : echo "deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_${VERSION_ID}/ /" | sudo tee /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list

- name: Get docker key
  become: yes
  ansible.builtin.apt_key:
    url: https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_${VERSION_ID}/Release.key
    state: present

- name: Install podman
  apt:
    name: podman
    update_cache: yes

- name: Make action-runner directory
  ansible.builtin.file:
    path: "{{ path_to_runner_directory }}"
    state: directory
    mode: '0755'

- name: Download runner tarball
  get_url:
    url: https://github.com/actions/runner/releases/download/v{{runner_release_version}}/actions-runner-linux-arm64-{{runner_release_version}}.tar.gz
    dest: "{{ path_to_runner_directory }}"
    mode: '0755'

- name: Unarchive runner tarball
  ansible.builtin.unarchive:
    src: "{{ path_to_runner_directory }}/actions-runner-linux-arm64-{{runner_release_version}}.tar.gz"
    dest: "{{ path_to_runner_directory }}"
    remote_src: yes
    list_files: yes
    creates: "{{ path_to_runner_directory }}/svc.sh"

- name: Configure the runner for GitHub
  become_user: ubuntu
  shell: ./config.sh --url https://github.com/Chia-Network --token "{{registration_token}}" --runnergroup "{{runner_group}}" --labels "{{runner_tags}}" --name "{{ ansible_hostname }}" --unattended
  args:
    chdir: "{{ path_to_runner_directory }}"
  ignore_errors: yes
  register: configure
- debug:
    msg: "{{ configure.stdout }}"

# The runner service becomes enabled in systemd after install
- name: Install the runner service
  shell: |
    sudo ./svc.sh install
  args:
    chdir: "{{ path_to_runner_directory }}"
  ignore_errors: yes
  register: install
- debug:
    msg: "{{ install.stdout }}"

- name:  Start the runner service
  shell: |
    sudo ./svc.sh start
    sudo ./svc.sh status
  args:
    chdir: "{{ path_to_runner_directory }}"
  register: output
- debug:
    msg: "{{ output.stdout }}"
